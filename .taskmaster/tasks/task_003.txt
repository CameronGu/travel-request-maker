# Task ID: 3
# Title: Setup Supabase Authentication with Magic Links
# Status: pending
# Dependencies: 1
# Priority: high
# Description: Configure Supabase Auth for magic link authentication with custom JWT claims for role-based access control
# Details:
Configure Supabase Auth settings for magic link authentication. Set up custom JWT claims structure with role, client_id, and link_ids. Create auth helper functions in src/lib/supabase/ for login, logout, and session management. Implement middleware for route protection based on roles. Create magic link generation API that creates link records and sends emails via Supabase Auth. Handle link expiry validation and renewal workflows.

# Test Strategy:
Test magic link generation and email delivery. Verify JWT claims are properly set and accessible in RLS policies. Test session persistence, automatic logout on expiry, and role-based route protection. Validate link expiry enforcement and renewal process.

# Subtasks:
## 1. Configure Supabase Auth for magic links [pending]
### Dependencies: None
### Description: Set up Supabase authentication configuration to enable magic link functionality, including email provider settings, redirect URLs, and authentication policies
### Details:
Configure Supabase project settings for magic link authentication, set up email templates, configure SMTP settings or email service provider, define redirect URLs for successful/failed authentication, and establish rate limiting policies

## 2. Define custom JWT claims and structure [pending]
### Dependencies: 3.1
### Description: Design and implement custom JWT token structure with additional claims for user roles, permissions, and application-specific metadata
### Details:
Define JWT payload structure with custom claims, implement token signing and verification logic, establish user role hierarchy, create permission mapping system, and ensure token security standards compliance

## 3. Implement auth helper functions [pending]
### Dependencies: 3.2
### Description: Create utility functions for authentication operations including token validation, user session management, and authentication state handling
### Details:
Build functions for token parsing and validation, session creation and destruction, user authentication status checking, token refresh mechanisms, and error handling for authentication failures

## 4. Build middleware for route protection [pending]
### Dependencies: 3.3
### Description: Develop middleware components to protect routes based on authentication status and user permissions using the custom JWT claims
### Details:
Create middleware for route authentication checking, implement role-based access control, build permission validation logic, handle unauthorized access scenarios, and integrate with existing routing system

## 5. Create magic link generation and email sending API [pending]
### Dependencies: 3.1, 3.3
### Description: Build API endpoints for generating secure magic links and sending them via email to users for authentication
### Details:
Implement magic link generation with secure tokens, create email sending functionality, build API endpoints for link requests, implement rate limiting and abuse prevention, and ensure email deliverability

## 6. Implement link expiry and renewal workflows [pending]
### Dependencies: 3.5
### Description: Create systems for managing magic link lifecycle including expiration handling, renewal processes, and cleanup of expired tokens
### Details:
Implement token expiration logic, create link renewal mechanisms, build cleanup processes for expired links, handle edge cases for expired link access, and implement user notification systems for link status

